{"version":3,"file":"angular-fire-messaging.umd.js","sources":["../../../src/messaging/messaging.ts","../../../src/messaging/messaging.module.ts"],"names":["ɵAngularFireSchedulers","of","observeOn","switchMap","isPlatformServer","EMPTY","map","ɵfirebaseAppFactory","throwError","defaultIfEmpty","Observable","concat","catchError","mergeMap","ɵlazySDKProxy","Injectable","Inject","FIREBASE_OPTIONS","Optional","FIREBASE_APP_NAME","PLATFORM_ID","NgZone","NgModule"],"mappings":"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","sourcesContent":["import { Inject, Injectable, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { messaging } from 'firebase/app';\nimport { concat, EMPTY, Observable, of, throwError } from 'rxjs';\nimport { catchError, defaultIfEmpty, map, mergeMap, observeOn, switchMap } from 'rxjs/operators';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵlazySDKProxy,\n  ɵPromiseProxy\n} from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\n\nexport interface AngularFireMessaging extends Omit<ɵPromiseProxy<messaging.Messaging>, 'deleteToken' | 'getToken' | 'requestPermission'> {\n}\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireMessaging {\n\n  public readonly requestPermission: Observable<void>;\n  public readonly getToken: Observable<string | null>;\n  public readonly tokenChanges: Observable<string | null>;\n  public readonly messages: Observable<{}>;\n  public readonly requestToken: Observable<string | null>;\n  public readonly deleteToken: (token: string) => Observable<boolean>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n\n    const messaging = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => isPlatformServer(platformId) ? EMPTY : import('firebase/messaging')),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => app.messaging())\n    );\n\n    if (!isPlatformServer(platformId)) {\n\n      this.requestPermission = messaging.pipe(\n        observeOn(schedulers.outsideAngular),\n        // tslint:disable-next-line\n        switchMap(messaging => messaging.requestPermission())\n      );\n\n    } else {\n\n      this.requestPermission = throwError('Not available on server platform.');\n\n    }\n\n    this.getToken = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.getToken()),\n      defaultIfEmpty(null)\n    );\n\n    const tokenChanges = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(\n        switchMap(() => messaging.getToken())\n      ))\n    );\n\n    this.tokenChanges = concat(\n      messaging.pipe(\n        observeOn(schedulers.outsideAngular),\n        switchMap(messaging => messaging.getToken())\n      ),\n      tokenChanges\n    );\n\n    this.messages = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onMessage.bind(messaging)))\n    );\n\n    this.requestToken = of(undefined).pipe(\n      switchMap(() => this.requestPermission),\n      catchError(() => of(null)),\n      mergeMap(() => this.tokenChanges)\n    );\n\n    this.deleteToken = (token: string) => messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.deleteToken(token)),\n      defaultIfEmpty(false)\n    );\n\n    return ɵlazySDKProxy(this, messaging, zone);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireMessaging } from './messaging';\n\n@NgModule({\n  providers: [ AngularFireMessaging ]\n})\nexport class AngularFireMessagingModule { }\n"]}