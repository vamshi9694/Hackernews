{"version":3,"file":"angular-fire-auth.umd.js","sources":["../../../src/auth/auth.ts","../../../src/auth/auth.module.ts"],"names":["ɵAngularFireSchedulers","ɵkeepUnstableUntilFirstFactory","of","observeOn","switchMap","map","ɵfirebaseAppFactory","shareReplay","first","Observable","from","ɵlazySDKProxy","Injectable","Inject","FIREBASE_OPTIONS","Optional","FIREBASE_APP_NAME","PLATFORM_ID","NgZone","NgModule"],"mappings":"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","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap, map, observeOn, shareReplay, first } from 'rxjs/operators';\nimport {\n  FIREBASE_OPTIONS,\n  FIREBASE_APP_NAME,\n  FirebaseOptions,\n  FirebaseAppConfig,\n  ɵPromiseProxy,\n  ɵlazySDKProxy,\n  ɵfirebaseAppFactory,\n  ɵAngularFireSchedulers,\n  ɵkeepUnstableUntilFirstFactory\n} from '@angular/fire';\nimport { User, auth } from 'firebase/app';\n\nexport interface AngularFireAuth extends ɵPromiseProxy<auth.Auth> {}\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuth {\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<auth.IdTokenResult|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string|FirebaseAppConfig|null|undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n\n    const auth = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => zone.runOutsideAngular(() => app.auth())),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n    //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly\n    //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n    //       There could potentially be race conditions still... but this greatly decreases the odds while\n    //       we reevaluate the API.\n    const _ = auth.pipe(first()).subscribe();\n\n    this.authState = auth.pipe(\n      switchMap(auth => zone.runOutsideAngular(() => new Observable<User|null>(auth.onAuthStateChanged.bind(auth)))),\n      keepUnstableUntilFirst\n    );\n\n    this.user = auth.pipe(\n      switchMap(auth => zone.runOutsideAngular(() => new Observable<User|null>(auth.onIdTokenChanged.bind(auth)))),\n      keepUnstableUntilFirst\n    );\n\n    this.idToken = this.user.pipe(\n      switchMap(user => user ? from(user.getIdToken()) : of(null))\n    );\n\n    this.idTokenResult = this.user.pipe(\n      switchMap(user => user ? from(user.getIdTokenResult()) : of(null))\n    );\n\n    return ɵlazySDKProxy(this, auth, zone);\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuth } from './auth';\n\n@NgModule({\n  providers: [ AngularFireAuth ]\n})\nexport class AngularFireAuthModule { }\n"]}